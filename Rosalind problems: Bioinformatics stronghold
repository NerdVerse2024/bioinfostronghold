{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8825679,"sourceType":"datasetVersion","datasetId":5309878},{"sourceId":8825724,"sourceType":"datasetVersion","datasetId":5309908}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/rukaiyakhatoon/rosalind-problems-bioinformatics-stronghold?scriptVersionId=186246974\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"def count_dna_symbols(s):\n    Adenine = s.count('A')\n    Cytosine = s.count('C')\n    Guanine = s.count('G')\n    Thymine = s.count('T')\n    return f\"{Adenine} {Cytosine} {Guanine} {Thymine}\"","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-30T15:26:56.47729Z","iopub.execute_input":"2024-06-30T15:26:56.477736Z","iopub.status.idle":"2024-06-30T15:26:56.523326Z","shell.execute_reply.started":"2024-06-30T15:26:56.4777Z","shell.execute_reply":"2024-06-30T15:26:56.52199Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# > Counting DNA Nucleotides","metadata":{}},{"cell_type":"code","source":"s = \"AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC\"\nresult = count_dna_symbols(s)\nprint(result)  ","metadata":{"execution":{"iopub.status.busy":"2024-06-30T15:26:56.525981Z","iopub.execute_input":"2024-06-30T15:26:56.526364Z","iopub.status.idle":"2024-06-30T15:26:56.53433Z","shell.execute_reply.started":"2024-06-30T15:26:56.526335Z","shell.execute_reply":"2024-06-30T15:26:56.532752Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"s = \"GCCGACAAGGCCGAGCTCGTCGTACCGTGGGCACGATAGGGAGACCGGTGCCTGTTCCAAAACTCGGGGCGTTCGTGTGGCAGTATCTTGTTGAATGACTGAAGTTTGATTTACGGATATTTAACCGGAGCTACTCTGGTGATCAGCTGATTTGCAGCGTCCAGGATAGTATTGTCAGGCCCCGGTAGGGACTGCCGCATTGTACAATCGCTAATGGAATTTCCAGCGAGGAACATGGTCACTCCCATTATTTGGAGAACAACGTTAAGGTTCGTTCGCTATAGCGTGCTGATGGCCAATTATCGCTGGTCGGACAGGCGCAGTCATAAGACTCTGACCAATCAACCGCCTCCGGGGCGAGCCTGTGATGTTTTTTACTCTGAGTACATCACGGCTAAAAAAAGAGTGTCTTGGACTAGTGGAATTTGGATGTTGAGGTCGGCTATACAATTTCCATTACGACATGAGACGACCTGGTTGGACGCTGCCCAACAGGTAAGACGTTCAATCGCTTCCACCAGCTATACGTTCGGTTGTGACTAGGGGCATCCTTTGATCACGAGATAGGATCTATCTACGAAAGGAAAGCGAGCGGTCCTTGCTAAAACCTGGTCCGCATATAAGTTTCTTCGCATTGGCAGTGCGCAAGGCAAGAGAGCTCACGTCCCGGGGTTAATGTGGTGGGACTCATCTAGGACCTCACCAAGTTGAGTAGCTTTGTGATCCAGGGGATCGTTAATGTAGTTTCGACCACGCCTGGTACGAACACACTGCTAAGAGCTTTCATGTGCTGTTTTTACGGGACCCCCCTCTGTACTGATTCCGGGGGTGTCGTCGTTGGGACATTCACCGGGGCGAAA\"\nresult = count_dna_symbols(s)\nprint(result) ","metadata":{"execution":{"iopub.status.busy":"2024-06-30T15:26:56.536064Z","iopub.execute_input":"2024-06-30T15:26:56.53651Z","iopub.status.idle":"2024-06-30T15:26:56.550926Z","shell.execute_reply.started":"2024-06-30T15:26:56.536471Z","shell.execute_reply":"2024-06-30T15:26:56.549419Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# > Transcribing DNA into RNA","metadata":{}},{"cell_type":"code","source":"def transcription(dna_string):\n    \"\"\"\n    Transcribe a DNA string to an RNA string by replacing all occurrences of 'T' with 'U'.\n\n    Args:\n        dna_string (str): The DNA string to be transcribed.\n\n    Returns:\n        str: The transcribed RNA string.\n    \"\"\"\n    rna_string = dna_string.replace('T', 'U')\n    return rna_string\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-30T15:26:56.563223Z","iopub.execute_input":"2024-06-30T15:26:56.563708Z","iopub.status.idle":"2024-06-30T15:26:56.571519Z","shell.execute_reply.started":"2024-06-30T15:26:56.56367Z","shell.execute_reply":"2024-06-30T15:26:56.56989Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Testing the function with the sample dataset\n# Testing the function with the sample dataset\ndna_string = \"GATGGAACTTGACTACGTAAATT\"\nrna_string = transcription(dna_string)\nprint(rna_string)   ","metadata":{"execution":{"iopub.status.busy":"2024-06-30T15:26:56.579701Z","iopub.execute_input":"2024-06-30T15:26:56.580206Z","iopub.status.idle":"2024-06-30T15:26:56.595314Z","shell.execute_reply.started":"2024-06-30T15:26:56.580173Z","shell.execute_reply":"2024-06-30T15:26:56.593473Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#solving rosalind problems\ndna_string = \"TCAATACCAGTAGATTTCGCAAGCCAGTTCTGCTTGCGTGACGTTACTTATCGGGTTGGGCTTCAGTTAAAGCCGGCTTGCGGTTCGATTCAGTTATAGCTAGAGTCGTTGGGGTACCTCTCTATACGAGCGCACAGTAGAGCTAGCCCAAAAGTTTGCAAGATAATGCAAACTTACACAGATTTGGGGATAGGAGGTTGGGCACTATTGCCTCAACCATCACAAGACATGTCGGCAAGGTAGTAATAAGAATATTGTGGAGGAAGACTCTAGGGTACCGCAGGAGAGTTAATCATATCTTGTCGCGTTCAAACTGCGTAAATCGAGCATATCAGCCACGGCGAGGCATACTCATCAATCTTATTTTATCCGGTGTTAGGCATTCCTCATTCTGGGGAACCCATAAATCTACGCAGTGGAAAATGTAGTCGGCTTCACTAGGATGACTGCTGAACCAAGCCATACCATGTCGCGAGTCAGCCAACAGGTCGCGCGAAATAAGTTACCGATCCATTTAGGATTAACCCCAGTACAGTGGGCCCATTACCCTTCAGGGCCAACATCACTAGATCATACCCCAGGTAATCGTATGATCACCCTTCACCTTAGCGAAGGACCATGGCCTCGCAGCAGTCCGTGCGTGTGGAATACACCCTGTGCCCTCACAGCATGCATCGTCATGATCGGGAAGATCATTCTCAGGGATTCACGAGCAGCAACGCTATCTATCTTAGCTGGTAAGATGTCAGGCCTCATGATATACATGCATAAGGTACCTATGGGGCGACATTCCCAAACAAGAATGCTAATTATGTGGCAAGTCCCTTAGCACATCCC\"\nrna_string = transcription(dna_string)\nprint(rna_string)  ","metadata":{"execution":{"iopub.status.busy":"2024-06-30T15:26:56.643444Z","iopub.execute_input":"2024-06-30T15:26:56.643915Z","iopub.status.idle":"2024-06-30T15:26:56.651704Z","shell.execute_reply.started":"2024-06-30T15:26:56.643882Z","shell.execute_reply":"2024-06-30T15:26:56.650142Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# > Complementing a strand of DNA","metadata":{}},{"cell_type":"code","source":"def reverse_complement(s):\n    complement = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}\n    return ''.join(complement[base] for base in s[::-1])\n\n ","metadata":{"execution":{"iopub.status.busy":"2024-06-30T15:26:56.704267Z","iopub.execute_input":"2024-06-30T15:26:56.704775Z","iopub.status.idle":"2024-06-30T15:26:56.712351Z","shell.execute_reply.started":"2024-06-30T15:26:56.704735Z","shell.execute_reply":"2024-06-30T15:26:56.710562Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"s = \"AAAACCCGGT\"\nprint(reverse_complement(s)) ","metadata":{"execution":{"iopub.status.busy":"2024-06-30T15:26:56.717203Z","iopub.execute_input":"2024-06-30T15:26:56.717717Z","iopub.status.idle":"2024-06-30T15:26:56.728464Z","shell.execute_reply.started":"2024-06-30T15:26:56.717676Z","shell.execute_reply":"2024-06-30T15:26:56.726967Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"s = \"CTAACTATTCGTAGCCATCGACATACGAGGGTCCCGATCTCGCTCCCGGGTCTTGCCAGTGTTTAAATAGTTTGTAGGTTCATGGCGGGGAGTTGGAACCACTTTTCTCCTGTGGGGGTCGTGGTGACGAGACATAGGTCGCCCCGCACGCGCAAAGACCGTGATGTACAACCTTTTTAGAAGCTGACGCGAGAAATTGGTGTGCCCCTTCTGATCCTGACGTCTATCTGGGATCGGTGTTCTGGTGTCACCGCCGTAAAACCCAGTCGCCAACCTCAGTTAGGATCACTAATCGTTTTATTCCTATGGTGCCTTCAGTACCCGATGTATTTCTACGATTCCGGAGTCTCATAAGAGACCACCTGACACGGGGCGGTATCAAAGCCTTTATGGCGGGTTATAATGCTACGTGGTTTATGTTGGACCTTTCCTGTCTACGGACTCGATACGTTTGAATTCCTGTATCCCTACAAGCACCGGCCGGCCGTCTCTGAACTTTGGCGCTATGTCCAGCAAGCACGCGATGGACAACTCCGCTATGGCGTAGTCTCCCTTTCATCTTTGCGGTCATCGGCTCCGGGCATTGGCGTACGCAAGAGGTCTTTGAGATCGGTGGCGGGGAGCGAAGCACCATCGAACCAATGGGTGGGTATGGCTACAGAATCAACTTCAAGAGGAGCCTTTTTGGCATTGTTTGAAATCGGGGCTGGGAACTGGCATCGCGTTTGAACCCCCACTGCTATTTCGGTTCATAACTCCCAGCGCTGTACGCCTTGCTGAGTTTTAGGGGGTTTAGTCGCATCTGACTTTCCGTTTGGACGACTCGCGTGCTAAAACCCGCCATCACATGGATGTTTTCAGATTCTCGCGATTTCTACGCTGTATACAGCGTGCCTCCTCTCTGATGAAGGTGATACGATTAGTGG\"\nprint(reverse_complement(s)) ","metadata":{"execution":{"iopub.status.busy":"2024-06-30T15:26:56.736115Z","iopub.execute_input":"2024-06-30T15:26:56.737312Z","iopub.status.idle":"2024-06-30T15:26:56.74462Z","shell.execute_reply.started":"2024-06-30T15:26:56.737267Z","shell.execute_reply":"2024-06-30T15:26:56.743093Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# > Rabbits and Recurrence Relations","metadata":{}},{"cell_type":"code","source":"def rabbit_pairs(n, k):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        F = [0]*(n+1)\n        F[1] = 1\n        F[2] = 1\n        for i in range(3, n+1):\n            F[i] = F[i-1] + k*F[i-2]\n        return F[n]\n\nn = 5\nk = 3\n\nprint(rabbit_pairs(n, k))","metadata":{"execution":{"iopub.status.busy":"2024-06-30T15:26:56.767599Z","iopub.execute_input":"2024-06-30T15:26:56.768095Z","iopub.status.idle":"2024-06-30T15:26:56.779116Z","shell.execute_reply.started":"2024-06-30T15:26:56.768057Z","shell.execute_reply":"2024-06-30T15:26:56.776842Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# > Computing GC Content","metadata":{}},{"cell_type":"code","source":"def highest_gc_content_from_file(file_path):\n    with open(file_path, 'r') as f:\n        fasta_data = f.read()\n    \n    max_gc_id = \"\"\n    max_gc_content = -1.0\n    \n    current_id = \"\"\n    current_dna = \"\"\n    \n    for line in fasta_data.splitlines():\n        if line.startswith('>'):\n            # Process previous DNA sequence if any\n            if current_id != \"\":\n                gc_content = (current_dna.count('G') + current_dna.count('C')) / len(current_dna) * 100.0\n                if gc_content > max_gc_content:\n                    max_gc_content = gc_content\n                    max_gc_id = current_id\n            \n            # Update current ID\n            current_id = line.strip()[1:]\n            current_dna = \"\"\n        else:\n            # Concatenate DNA sequences\n            current_dna += line.strip()\n    \n    # Final check for the last DNA sequence\n    if current_id != \"\":\n        gc_content = (current_dna.count('G') + current_dna.count('C')) / len(current_dna) * 100.0\n        if gc_content > max_gc_content:\n            max_gc_content = gc_content\n            max_gc_id = current_id\n    \n    return max_gc_id, max_gc_content\n\n# File path\nfile_path = '/kaggle/input/gc2content/rosalind_gc (1).txt'\n\n# Obtain result\nresult_id, result_gc_content = highest_gc_content_from_file(file_path)\n\n# Print result\nprint(result_id)\nprint(f\"{result_gc_content:.6f}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-30T15:43:01.222079Z","iopub.execute_input":"2024-06-30T15:43:01.22256Z","iopub.status.idle":"2024-06-30T15:43:01.240292Z","shell.execute_reply.started":"2024-06-30T15:43:01.222512Z","shell.execute_reply":"2024-06-30T15:43:01.238934Z"},"trusted":true},"execution_count":null,"outputs":[]}]}